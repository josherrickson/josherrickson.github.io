<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Josh Errickson</title>
    <link>http://errickson.net/tags/r/</link>
    <description>Recent content in R on Josh Errickson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Apr 2023 10:17:10 -0400</lastBuildDate><atom:link href="http://errickson.net/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R&#39;s sys.call vs match.call</title>
      <link>http://errickson.net/posts/syscall_vs_matchcall/</link>
      <pubDate>Sat, 29 Apr 2023 10:17:10 -0400</pubDate>
      
      <guid>http://errickson.net/posts/syscall_vs_matchcall/</guid>
      <description>The sys.call() function returns the exact call to the function.
The match.call() function names all arguments and orders them as appropriate.
1 2 3 4 5 f &amp;lt;- function(x, y = 2) { print(paste(&amp;#34;sys.call():&amp;#34;, deparse(sys.call()))) print(paste(&amp;#34;match.call():&amp;#34;, deparse(match.call()))) invisible(TRUE) } This results in:
1 2 3 4 5 6 7 8 9 &amp;gt; f(1, 2) [1] &amp;#34;sys.call(): f(1, 2)&amp;#34; [1] &amp;#34;match.call(): f(x = 1, y = 2)&amp;#34; &amp;gt; f(y = 2, x = 1) [1] &amp;#34;sys.</description>
    </item>
    
    <item>
      <title>R&#39;s `all.equal`, relative vs absolute</title>
      <link>http://errickson.net/posts/all.equal-scale-difference/</link>
      <pubDate>Thu, 06 Apr 2023 10:29:25 -0400</pubDate>
      
      <guid>http://errickson.net/posts/all.equal-scale-difference/</guid>
      <description>The all.equal() function is useful to comparing whether two numeric objects are equivalent, but it has a weird quirk.
1 2 &amp;gt; all.equal(4, 5) [1] &amp;#34;Mean relative difference: 0.25&amp;#34; You might expect that the difference should be 1. But note the &amp;ldquo;relative difference.&amp;rdquo; The default for all.equal is to report the difference for a call of all.equal(x, y) as |x - y|/x. This also means that all.equal(x, y) is not going to report the same difference as all.</description>
    </item>
    
    <item>
      <title>Character-wise String Comparison in R</title>
      <link>http://errickson.net/posts/characterwise-string-comparison/</link>
      <pubDate>Wed, 29 Mar 2023 06:05:44 -0400</pubDate>
      
      <guid>http://errickson.net/posts/characterwise-string-comparison/</guid>
      <description>If you have two strings in R and want to check character-by-character equality:
1 2 3 a &amp;lt;- &amp;#34;abcdef&amp;#34; b &amp;lt;- &amp;#34;abcdff&amp;#34; Reduce(`==`, strsplit(c(a, b), &amp;#34;&amp;#34;)) This results in:
1 2 &amp;gt; Reduce(`==`, strsplit(c(a, b), &amp;#34;&amp;#34;)) [1] TRUE TRUE TRUE TRUE FALSE TRUE </description>
    </item>
    
    <item>
      <title>Eval vs Get</title>
      <link>http://errickson.net/posts/eval-vs-get/</link>
      <pubDate>Mon, 27 Mar 2023 10:14:52 -0400</pubDate>
      
      <guid>http://errickson.net/posts/eval-vs-get/</guid>
      <description>I&amp;rsquo;ve been fighting damn scoping issues lately and finally sat down to figure out what works and when. Documenting some of them here
The lessons I&amp;rsquo;ve learned from this:
eval(a, envir = ... ) DOES NOT WORK! Instead, do eval(str2lang(&amp;quot;a&amp;quot;), envir = ...) eval.parent(a) DOES NOT WORK! eval.parent(str2lang(&amp;quot;a&amp;quot;)) works and SKIPS GENERIC! get(&amp;quot;a&amp;quot;, envir = ...) seems to always work as expected So to summarize, I think get is always a safer option than eval.</description>
    </item>
    
    <item>
      <title>A More Sane `yesno()` for devtools</title>
      <link>http://errickson.net/posts/devtools-better-yesno/</link>
      <pubDate>Wed, 22 Mar 2023 13:45:59 -0400</pubDate>
      
      <guid>http://errickson.net/posts/devtools-better-yesno/</guid>
      <description>When working with devtools, you&amp;rsquo;ll often be asked a yes/no question and get the annoying prompt of three randomly ordered and randomly worded variations of &amp;ldquo;Yes&amp;rdquo; and &amp;ldquo;No&amp;rdquo;, so that you have to think hard to pick the right one. I get what they&amp;rsquo;re trying to do (force you to actually think about the question rather than hitting &amp;ldquo;Y&amp;rdquo; repeatedly) but I find it very annoying. Here&amp;rsquo;s a fix.
Add this code to your .</description>
    </item>
    
    <item>
      <title>Disable Slidy Click Advance</title>
      <link>http://errickson.net/posts/disable-slidy-click-advance/</link>
      <pubDate>Wed, 22 Mar 2023 13:30:35 -0400</pubDate>
      
      <guid>http://errickson.net/posts/disable-slidy-click-advance/</guid>
      <description>Slidy presentations in R, by default, advance on mouse-click, which can be frustrating.
Once you have a Slidy presentation loaded, the &amp;ldquo;k&amp;rdquo; key will disable this.
We can disable it more generally by modifying the rmarkdown package you have installed.
Find your rmarkdown installation: 1 system.file(package = &amp;#34;rmarkdown&amp;#34;) Navigate to that directory, then edit the file: rmd/slidy/Slidy2/scripts/slidy.js Find the line that defines mouse_click_enabled (in rmarkdown version 2.20, this is line 55).</description>
    </item>
    
    <item>
      <title>Color by Significance in R&#39;s `forestplot`</title>
      <link>http://errickson.net/posts/forestplot-color-by-significance/</link>
      <pubDate>Wed, 22 Mar 2023 12:44:42 -0400</pubDate>
      
      <guid>http://errickson.net/posts/forestplot-color-by-significance/</guid>
      <description>The forestplot package doesn&amp;rsquo;t easily support advanced coloring of each point, specifically to flag significance levels.
It does however supported custom coloring via a moderately complicated custom function, so here&amp;rsquo;s an example of how to color by significance.
First, create the following function:
1 2 3 4 5 6 7 8 9 10 11 12 fn &amp;lt;- local({ i &amp;lt;- 0 clrs &amp;lt;- ifelse(dat$pv &amp;lt; .05, &amp;#34;darkgreen&amp;#34;, -ifelse(dat$pv &amp;lt; .1, &amp;#34;blue&amp;#34;, &amp;#34;darkgrey&amp;#34;)) function(.</description>
    </item>
    
    <item>
      <title>Increase ALL Text Size in ggplot</title>
      <link>http://errickson.net/posts/ggplot-increase-all-text-size/</link>
      <pubDate>Wed, 22 Mar 2023 12:04:41 -0400</pubDate>
      
      <guid>http://errickson.net/posts/ggplot-increase-all-text-size/</guid>
      <description>You can add
1 + theme(text = element_text(size=20)) to a ggplot object to modify the size of ALL text elements.
(This is with ggplot 3.4.1 in case they change the API again.)</description>
    </item>
    
  </channel>
</rss>
